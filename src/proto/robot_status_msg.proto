syntax = "proto3";

package TbotsProto;

import "proto/tbots_timestamp_msg.proto";

message RobotStatus
{
    uint32 robot_id                           = 1;
    BreakBeamStatus break_beam_status         = 2;
    ChipperKickerStatus chipper_kicker_status = 3;
    DriveUnitStatus drive_units               = 4;
    DribblerStatus dribbler_status            = 5;
    NetworkStatus network_status              = 6;
    PowerStatus power_status                  = 7;
    TemperatureStatus temperature_status      = 8;
    ThunderloopStatus thunderloop_status      = 9;
    Timestamp time_sent                       = 10;
}

message ThunderloopStatus
{
    uint64 network_service_poll_time_ns     = 1;
    uint64 primitive_executor_start_time_ns = 2;
    uint64 primitive_executor_step_time_ns  = 3;
    uint64 motor_service_poll_time_ns       = 4;
    uint64 iteration_time_ns                = 5;
}

/* Data about the status of the break beam */
message BreakBeamStatus
{
    // Whether or not the ball is interrupting the robot’s laser beam.
    bool ball_in_beam = 1;

    // The reading of the robot’s laser sensor, normalized to [0,1]
    float break_beam_reading = 2;
}

/* Data about the status of the chipper and kicker */
message ChipperKickerStatus
{
    // Indicates the time elapsed since chipper was last fired in ms
    // UINT64_MAX indicates chipper was never fired
    uint32 ms_since_chipper_fired = 1;

    // Indicates the time elapsed since kicker was last fired in ms
    // UINT64_MAX indicates kicker was never fired
    uint32 ms_since_kicker_fired = 2;
}

/* Data about the status of the dribbler
 * Note that the rotation is from the perspective of rear of the motor, looking down
 * the shaft starting from the motor body
 */
message DribblerStatus
{
    // The current speed of the dribbler in RPM
    float dribbler_rpm = 1;

    // The temperature of the robot’s dribbler motor, in degrees Celsius.
    float dribbler_temperature = 1;
}

message DriveUnit
{
    // The current RPM of the wheel
    float wheel_rpm = 1;

    // The current position of the wheel in radians
    float wheel_encoder_phi_e = 2;

    // The pwm being applied
    float pwm_u = 3;
    float pwm_v = 4;
    float pwm_w = 5;

    // The measured voltage on the ADC
    float adc_u = 6;
    float adc_v = 7;
    float adc_w = 8;
}

/* Data from all four drive units */
message MotorStatus
{
    DriveUnit front_left    = 1;
    DriveUnit front_right   = 2;
    DriveUnit back_left     = 3;
    DriveUnit back_right    = 4;
    DribblerStatus dribbler = 5;
}

/* Data about the network connection with the robots, including network-derived values */
message NetworkStatus
{
    // Indicates the time elapsed since the last vision packet was received in ms
    // UINT64_MAX indicates no vision packet was ever received
    uint32 ms_since_last_vision_received = 1;

    // Indicates the time elapsed since the last primitive packet was received in ms
    // UINT64_MAX indicates no primitive packet was ever received
    uint32 ms_since_last_primitive_received = 2;
}

/* Battery and capacitor voltages */
message PowerStatus
{
    // The voltage on the robot’s battery, in volts.
    float battery_voltage = 1;

    // voltage on the robot’s capacitor, in volts.
    float capacitor_voltage = 2;
    float current_draw      = 3;
    float geneva_angle_deg  = 4;
    bool breakbream_tripped = 5;
    bool flyback_fault      = 6;
}
